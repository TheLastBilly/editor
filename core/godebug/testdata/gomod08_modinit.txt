cd main

# opt-out of default proxy service (ex: goes to github.com directly)
#setenv GOPROXY direct

# no proxy to use only what is available locally
setenv GOPROXY off

# without a go.mod
fail exec go mod init
contains stderr "go: cannot determine module path for source directory"

# suggests using "go mod tidy"
exec go mod init example.com

# cannot find module because goproxy=off, shouldn't it be able to find it locally?
fail exec go mod tidy
contains stderr "cannot find module"

fail exec go mod download golang.org/x/example/stringutil
contains stderr "not a known dependency"

fail exec go mod download golang.org/x/example

# TODO: should be able to solve this with goproxy=off

# set goproxy to empty to get default behaviour (golang.org)
setenv GOPROXY

exec go mod tidy
contains stderr "go: finding"
contains stderr "go: found"

# suggests using "go mod download"
exec go run main.go
contains stderr "cba"

ucmd godebugtester run main.go
#ucmd godebugtester run -verbose -work main.go
contains stdout "println(\"cba\")"
# inside the external pkg
contains stdout "=> len([99 98 97])"

-- main/main.go --
package main
//godebug:annotatepackage:golang.org/x/example/stringutil
import "golang.org/x/example/stringutil"
func main() {
	v:=stringutil.Reverse("abc")
	println(v)
}
