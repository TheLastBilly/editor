# resloc parser grammar
# rules predefined in code for this parser: rl*

#----------

location = cFile | pyFile | schemeFile;

#----------

cFile = filename (cLineCol)?;
cLineCol = ":" digits (":" digits)?;

#----------

pyFile = pyFilename (pyLineStr digits)?;
pyFilename = pyQuote filename pyQuote;
pyQuote = "\"";
pyLineStr = ", line ";

#----------

schemeFile = "file://" (schHost)? schPath (cLineCol)?;
schHost = (letter | digit | (".-_")%)+;
schPath = schPathSep schVolume schNames;
schVolume = if rlParseVolume ? volume schPathSep : nil;
schNames = (schPathSep | fiNameItem | schNameSyms)+;
schPathSep = "/";
schNameSyms = @dropRunes(syms,nameSepSyms,(schPathSep)%);

#----------

filename = fiVolume fiNames;
fiVolume = if rlParseVolume ? volume rlPathSep : nil;
fiNames =  (rlPathSep | fiNameItem | fiNameSyms)+;
fiNameItem = letter | digit | fiEsc;
fiNameSyms = @dropRunes(syms,nameSepSyms,(rlPathSep)%);
fiEsc = @escapeAny(0,rlEsc);

#----------

volume = letter ":";

syms = ("_-~.%@&?!=#+:^(){}[]<>\\/ ")%; # besides letters and digits
nameSepSyms = (	# name separator symbols
	" "  			# word separator
	"=" 			# usually around filenames (ex: -arg=/a/b.txt)
	"(){}[]<>" 		# usually used around filenames in various outputs
	":" 			# usually separating lines/cols from filenames
	rlEsc
	)%;

#----------
#----------
#----------

# rules to run in reverse to find a better parse start
reverse =
	(pyQuote)?
	(if rlParseVolume ? volume : nil)
	(revNames)
	(pyQuote)?
	((pyLineStr)~)?	# python middle match
	(":" | digit)* 		# c line column	
	;
revNames = (revPathSeps | fiNameItem | revNameSyms | rlEsc)*;
revNameSyms = @dropRunes(syms,nameSepSyms,revPathSeps);
revPathSeps = (
	if rlPathSepEqSchPathSep ? 
		rlPathSep :
		(rlPathSep)% | (schPathSep)%
)%;

